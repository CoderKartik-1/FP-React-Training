{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\K.G.ta22\\\\Documents\\\\FPReact\\\\FP-React-Training\\\\my-first-app\\\\src\\\\otherHooks\\\\usingUseMemo.js\",\n  _s = $RefreshSig$();\nimport { useState, useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UsingMemoFunction() {\n  _s();\n  let [count, setCount] = useState(500000000);\n  let [counter, setCounter] = useState(0);\n  let totalValue = useMemo(() => calculateSum(count), [count]);\n  function calculateSum(count) {\n    var sum = 0;\n    for (let i = 0; i < count; i++) {\n      sum += i;\n    }\n    return sum;\n  }\n  function incrementCounter() {\n    setCounter(oldCounter => {\n      return oldCounter + 1;\n    });\n  }\n  function incrementDecrementCount(increseOrDecrease) {\n    if (increseOrDecrease == 1) {\n      setCount(oldCount => {\n        return oldCount + 1;\n      });\n    } else {\n      setCount(oldCount => {\n        return oldCount - 1;\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Sum value is: \", totalValue]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: [\"Counter Value = \", counter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: incrementCounter,\n      value: \"Increment Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: () => incrementDecrementCount(1),\n      value: \"Increment Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      onClick: () => incrementDecrementCount(0),\n      value: \"DecrementCount Count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(UsingMemoFunction, \"bsVUSRrTMRuNiGRWqDcQOv5QTCk=\");\n_c = UsingMemoFunction;\nvar _c;\n$RefreshReg$(_c, \"UsingMemoFunction\");","map":{"version":3,"names":["useState","useMemo","jsxDEV","_jsxDEV","Fragment","_Fragment","UsingMemoFunction","_s","count","setCount","counter","setCounter","totalValue","calculateSum","sum","i","incrementCounter","oldCounter","incrementDecrementCount","increseOrDecrease","oldCount","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","value","_c","$RefreshReg$"],"sources":["C:/Users/K.G.ta22/Documents/FPReact/FP-React-Training/my-first-app/src/otherHooks/usingUseMemo.js"],"sourcesContent":["import { useState, useMemo } from \"react\";\r\n\r\nexport default function UsingMemoFunction() {\r\n\r\n    let [count, setCount] = useState(500000000);\r\n    let [counter, setCounter] = useState(0);\r\n    \r\n    let totalValue = useMemo( () => calculateSum(count), [count]);\r\n    function calculateSum(count) {\r\n        var sum = 0;\r\n        for (let i = 0; i < count; i++) {\r\n            sum += i;\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    function incrementCounter() {\r\n        setCounter((oldCounter) => {\r\n            return oldCounter + 1;\r\n        })\r\n    }\r\n\r\n    function incrementDecrementCount(increseOrDecrease) {\r\n        if (increseOrDecrease == 1) {\r\n            setCount((oldCount) => {\r\n                return oldCount + 1\r\n            })\r\n        } else {\r\n            setCount((oldCount) => {\r\n                return oldCount - 1\r\n            })\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <h1>Sum value is: {totalValue}</h1>\r\n            <b>Counter Value = {counter}</b>\r\n            <input type=\"button\" onClick={incrementCounter} value=\"Increment Counter\" />\r\n            <input type=\"button\" onClick={() => incrementDecrementCount(1)} value=\"Increment Count\" />\r\n            <input type=\"button\" onClick={() => incrementDecrementCount(0)} value=\"DecrementCount Count\" />\r\n        </>\r\n    )\r\n}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,eAAe,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAExC,IAAI,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,SAAS,CAAC;EAC3C,IAAI,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEvC,IAAIY,UAAU,GAAGX,OAAO,CAAE,MAAMY,YAAY,CAACL,KAAK,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAC7D,SAASK,YAAYA,CAACL,KAAK,EAAE;IACzB,IAAIM,GAAG,GAAG,CAAC;IACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,EAAEO,CAAC,EAAE,EAAE;MAC5BD,GAAG,IAAIC,CAAC;IACZ;IACA,OAAOD,GAAG;EACd;EAEA,SAASE,gBAAgBA,CAAA,EAAG;IACxBL,UAAU,CAAEM,UAAU,IAAK;MACvB,OAAOA,UAAU,GAAG,CAAC;IACzB,CAAC,CAAC;EACN;EAEA,SAASC,uBAAuBA,CAACC,iBAAiB,EAAE;IAChD,IAAIA,iBAAiB,IAAI,CAAC,EAAE;MACxBV,QAAQ,CAAEW,QAAQ,IAAK;QACnB,OAAOA,QAAQ,GAAG,CAAC;MACvB,CAAC,CAAC;IACN,CAAC,MAAM;MACHX,QAAQ,CAAEW,QAAQ,IAAK;QACnB,OAAOA,QAAQ,GAAG,CAAC;MACvB,CAAC,CAAC;IACN;EACJ;EAEA,oBACIjB,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACIlB,OAAA;MAAAkB,QAAA,GAAI,gBAAc,EAACT,UAAU;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnCtB,OAAA;MAAAkB,QAAA,GAAG,kBAAgB,EAACX,OAAO;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChCtB,OAAA;MAAOuB,IAAI,EAAC,QAAQ;MAACC,OAAO,EAAEX,gBAAiB;MAACY,KAAK,EAAC;IAAmB;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5EtB,OAAA;MAAOuB,IAAI,EAAC,QAAQ;MAACC,OAAO,EAAEA,CAAA,KAAMT,uBAAuB,CAAC,CAAC,CAAE;MAACU,KAAK,EAAC;IAAiB;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1FtB,OAAA;MAAOuB,IAAI,EAAC,QAAQ;MAACC,OAAO,EAAEA,CAAA,KAAMT,uBAAuB,CAAC,CAAC,CAAE;MAACU,KAAK,EAAC;IAAsB;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACjG,CAAC;AAEX;AAAClB,EAAA,CAzCuBD,iBAAiB;AAAAuB,EAAA,GAAjBvB,iBAAiB;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}