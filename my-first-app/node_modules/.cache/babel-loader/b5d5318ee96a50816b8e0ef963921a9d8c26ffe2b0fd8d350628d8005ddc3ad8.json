{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\K.G.ta22\\\\Downloads\\\\Fareportal\\\\my-first-app\\\\src\\\\classes\\\\UpdatedClassComponent.jsx\";\nimport { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UpdateClockComponent extends Component {\n  returnCurrentTime() {\n    return `${new Date().getHours()} : ${new Date().getMinutes()} : ${new Date().getSeconds()}`;\n  }\n  constructor(props) {\n    super(props);\n    this.incrementCounter = () => {\n      this.setState({\n        counter: this.state.counter + 1\n      });\n    };\n    this.state = {\n      currentTime: this.returnCurrentTime(),\n      counter: 0,\n      applicationUser: \"Random\"\n    };\n\n    //Anything to be done as part of updating and re-rendering should not be included in constructor\n    // setInterval(()=>{\n    //     this.setState({\n    //         counter: this.state.counter + 1\n    //     })\n    // }, 1000)\n\n    // setInterval(()=>{\n    //     this.setState({\n    //         currentTime:this.returnCurrentTime()\n    //     })\n    // }, 1000)\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.counter % 4 == 0) return false; //if component is not to be updated on state change\n    return true; //component gets updated if state changes\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Enter name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 29\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 51\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 57\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: [\"Entered Name is: \", this.state.applicationUser]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" Current time for \", this.props.userName, \" is \", this.state.currentTime, \" | \", this.state.counter, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Click to update counter\",\n        onClick: this.incrementCounter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n  //All updation and re-rendering should be part of componentDidMount()\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        currentTime: this.returnCurrentTime()\n      });\n    }, 1000);\n  }\n}","map":{"version":3,"names":["Component","jsxDEV","_jsxDEV","UpdateClockComponent","returnCurrentTime","Date","getHours","getMinutes","getSeconds","constructor","props","incrementCounter","setState","counter","state","currentTime","applicationUser","shouldComponentUpdate","nextProps","nextState","render","children","type","fileName","_jsxFileName","lineNumber","columnNumber","userName","value","onClick","componentDidMount","setInterval"],"sources":["C:/Users/K.G.ta22/Downloads/Fareportal/my-first-app/src/classes/UpdatedClassComponent.jsx"],"sourcesContent":["import {Component} from \"react\";\r\n\r\n\r\nexport default class UpdateClockComponent extends Component{\r\n\r\n    returnCurrentTime() {\r\n        return `${new Date().getHours()} : ${new Date().getMinutes()} : ${new Date().getSeconds()}`;\r\n    }\r\n\r\n    \r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentTime: this.returnCurrentTime(),\r\n            counter:0,\r\n            applicationUser: \"Random\"\r\n        }\r\n        \r\n        //Anything to be done as part of updating and re-rendering should not be included in constructor\r\n        // setInterval(()=>{\r\n        //     this.setState({\r\n        //         counter: this.state.counter + 1\r\n        //     })\r\n        // }, 1000)\r\n\r\n        // setInterval(()=>{\r\n        //     this.setState({\r\n        //         currentTime:this.returnCurrentTime()\r\n        //     })\r\n        // }, 1000)\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        if(nextState.counter%4==0)\r\n            return false; //if component is not to be updated on state change\r\n        return true; //component gets updated if state changes\r\n    }\r\n\r\n    incrementCounter = () =>{\r\n        this.setState({\r\n            counter: this.state.counter + 1\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                Enter name: <input type=\"text\" /> <br /><br/>\r\n                <b>Entered Name is: {this.state.applicationUser}</b>\r\n                <h1> Current time for {this.props.userName} is {this.state.currentTime} | {this.state.counter} </h1>\r\n                <input type=\"button\" value=\"Click to update counter\" onClick={this.incrementCounter}/>\r\n            </div>\r\n        )\r\n    }   \r\n\r\n    //All updation and re-rendering should be part of componentDidMount()\r\n    componentDidMount(){\r\n\r\n        setInterval(()=>{\r\n            this.setState({\r\n                currentTime:this.returnCurrentTime()\r\n            })\r\n        }, 1000)\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n"],"mappings":";AAAA,SAAQA,SAAS,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhC,eAAe,MAAMC,oBAAoB,SAASH,SAAS;EAEvDI,iBAAiBA,CAAA,EAAG;IAChB,OAAQ,GAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAE,MAAK,IAAID,IAAI,CAAC,CAAC,CAACE,UAAU,CAAC,CAAE,MAAK,IAAIF,IAAI,CAAC,CAAC,CAACG,UAAU,CAAC,CAAE,EAAC;EAC/F;EAIAC,WAAWA,CAACC,KAAK,EAAC;IACd,KAAK,CAACA,KAAK,CAAC;IAAC,KA2BjBC,gBAAgB,GAAG,MAAK;MACpB,IAAI,CAACC,QAAQ,CAAC;QACVC,OAAO,EAAE,IAAI,CAACC,KAAK,CAACD,OAAO,GAAG;MAClC,CAAC,CAAC;IACN,CAAC;IA9BG,IAAI,CAACC,KAAK,GAAG;MACTC,WAAW,EAAE,IAAI,CAACX,iBAAiB,CAAC,CAAC;MACrCS,OAAO,EAAC,CAAC;MACTG,eAAe,EAAE;IACrB,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;EACJ;EAEAC,qBAAqBA,CAACC,SAAS,EAAEC,SAAS,EAAC;IACvC,IAAGA,SAAS,CAACN,OAAO,GAAC,CAAC,IAAE,CAAC,EACrB,OAAO,KAAK,CAAC,CAAC;IAClB,OAAO,IAAI,CAAC,CAAC;EACjB;EAQAO,MAAMA,CAAA,EAAE;IACJ,oBACIlB,OAAA;MAAAmB,QAAA,GAAK,cACW,eAAAnB,OAAA;QAAOoB,IAAI,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAAC,eAAAxB,OAAA;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAAAxB,OAAA;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7CxB,OAAA;QAAAmB,QAAA,GAAG,mBAAiB,EAAC,IAAI,CAACP,KAAK,CAACE,eAAe;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpDxB,OAAA;QAAAmB,QAAA,GAAI,oBAAkB,EAAC,IAAI,CAACX,KAAK,CAACiB,QAAQ,EAAC,MAAI,EAAC,IAAI,CAACb,KAAK,CAACC,WAAW,EAAC,KAAG,EAAC,IAAI,CAACD,KAAK,CAACD,OAAO,EAAC,GAAC;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpGxB,OAAA;QAAOoB,IAAI,EAAC,QAAQ;QAACM,KAAK,EAAC,yBAAyB;QAACC,OAAO,EAAE,IAAI,CAAClB;MAAiB;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrF,CAAC;EAEd;;EAEA;EACAI,iBAAiBA,CAAA,EAAE;IAEfC,WAAW,CAAC,MAAI;MACZ,IAAI,CAACnB,QAAQ,CAAC;QACVG,WAAW,EAAC,IAAI,CAACX,iBAAiB,CAAC;MACvC,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC;EAGZ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}